/*
 * ExCommerce
 *
 * ExCommerce is an example commerce system.
 *
 * API version: beta
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"errors"
	"net/http"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/Teelevision/excommerce/authentication"
	"github.com/Teelevision/excommerce/controller"
	"github.com/Teelevision/excommerce/model"
	"github.com/gorilla/mux"
)

var _ Router = (*ProductsAPI)(nil)

// A ProductsAPI binds http requests to an api service and writes the service results to the http response
type ProductsAPI struct {
	Authenticator     *authentication.Authenticator
	ProductController *controller.Product
}

// Routes returns all of the api route for the ProductsApiController
func (c *ProductsAPI) Routes() Routes {
	return Routes{
		{
			"GetAllProducts",
			strings.ToUpper("Get"),
			"/beta/products",
			c.GetAllProducts,
		},
		{
			"StoreCouponForProduct",
			strings.ToUpper("Put"),
			"/beta/products/{productId}/coupons/{couponCode}",
			c.Authenticator.HandlerFunc(c.StoreCouponForProduct),
		},
	}
}

// GetAllProducts - Get all products
func (c *ProductsAPI) GetAllProducts(w http.ResponseWriter, r *http.Request) {
	products, err := c.ProductController.GetAll(r.Context())
	switch {
	case err == nil:
		result := make([]Product, len(products))
		for i, product := range products {
			result[i].ID = product.ID
			result[i].Name = product.Name
			result[i].Price = float32(product.Price) / 100
		}
		EncodeJSONResponse(result, nil, w)
	default:
		panic(err)
	}
}

// StoreCouponForProduct - Create product coupon
func (c *ProductsAPI) StoreCouponForProduct(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// check that the user is the admin
	user := authentication.AuthenticatedUser(ctx)
	if user.Name != "admin" {
		w.WriteHeader(http.StatusForbidden) // 403
		return
	}

	// input
	params := mux.Vars(r)
	productID := params["productId"]
	couponCode := strings.ToLower(params["couponCode"])
	coupon := &Coupon{}
	if err := json.NewDecoder(r.Body).Decode(&coupon); err != nil {
		w.WriteHeader(500)
		return
	}

	// validation
	if !uuidPattern.Match([]byte(productID)) {
		invalidInput("The productId of the path is not a UUID.", uuidPattern.String(), w)
		return
	}
	if l := utf8.RuneCountInString(couponCode); l < 6 || l > 40 {
		invalidInput("The coupon code must be 6 to 40 characters long.", "", w)
		return
	}
	if l := utf8.RuneCountInString(coupon.Name); l < 1 || l > 100 {
		failValidation("The name must be 1 to 100 characters long.", "/name", w)
		return
	}
	if coupon.Discount < 1 || coupon.Discount > 100 {
		failValidation("The discount must be any integer from 1 to 100.", "/discount", w)
		return
	}

	// convert to internal model
	couponInput := model.Coupon{
		Code:      couponCode,
		ProductID: productID,
		Name:      coupon.Name,
		Discount:  int(coupon.Discount),
		ExpiresAt: coupon.ExpiresAt,
	}
	// load product
	product, err := c.ProductController.Get(ctx, couponInput.ProductID)
	switch {
	case errors.Is(err, controller.ErrNotFound):
		w.WriteHeader(http.StatusNotFound) // 404
		return
	case err == nil:
		couponInput.Product = product
	default:
		panic(err)
	}

	// action
	couponOutput, err := c.ProductController.SaveCoupon(ctx, &couponInput)
	switch {
	case err == nil:
		EncodeJSONResponse(&Coupon{
			Code:      couponOutput.Code,
			Name:      couponOutput.Name,
			Discount:  int32(couponOutput.Discount),
			ExpiresAt: couponOutput.ExpiresAt.UTC().Truncate(time.Second),
			Product: Product{
				ID:    couponOutput.Product.ID,
				Name:  couponOutput.Product.Name,
				Price: float32(couponOutput.Product.Price) / 100,
			},
		}, nil, w)
	default:
		panic(err)
	}
}
