/*
 * ExCommerce
 *
 * ExCommerce is an example commerce system.
 *
 * API version: beta
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"errors"
	"net/http"
	"unicode/utf8"

	"github.com/Teelevision/excommerce/controller"
)

var _ Router = (*UsersAPI)(nil)

// A UsersAPI binds http requests to an api service and writes the service results to the http response
type UsersAPI struct {
	UserController *controller.User
}

// Routes returns all of the api route for the UsersApiController
func (c *UsersAPI) Routes() Routes {
	return Routes{
		{
			Name:        "Login",
			Method:      "POST",
			Path:        "/beta/users/login",
			HandlerFunc: c.Login,
		},
		{
			Name:        "Register",
			Method:      "POST",
			Path:        "/beta/users",
			HandlerFunc: c.Register,
		},
	}
}

// Login - Login a user
func (c *UsersAPI) Login(w http.ResponseWriter, r *http.Request) {
	loginForm := &LoginForm{}
	if err := json.NewDecoder(r.Body).Decode(&loginForm); err != nil {
		invalidJSON(err, w)
		return
	}

	// action
	u, err := c.UserController.GetByNameAndPassword(r.Context(), loginForm.Name, loginForm.Password)
	switch {
	case errors.Is(err, controller.ErrNotFound):
		w.WriteHeader(http.StatusNotFound) // 404
	case err == nil:
		EncodeJSONResponse(&User{
			ID:   u.ID,
			Name: u.Name,
		}, nil, w)
	default:
		unexpectedError(err, w)
	}
}

// Register - Register a user
func (c *UsersAPI) Register(w http.ResponseWriter, r *http.Request) {
	user := &User{}
	if err := json.NewDecoder(r.Body).Decode(&user); err != nil {
		invalidJSON(err, w)
		return
	}

	// validation
	if l := utf8.RuneCountInString(user.Name); l < 1 || l > 64 {
		failValidation("The name must be 1 to 64 characters long.", "/name", w)
		return
	}
	if l := utf8.RuneCountInString(user.Password); l < 8 || l > 64 {
		failValidation("The password must be 8 to 64 characters long.", "/password", w)
		return
	}

	// action
	u, err := c.UserController.Create(r.Context(), user.Name, user.Password)
	switch {
	case errors.Is(err, controller.ErrConflict):
		w.WriteHeader(http.StatusConflict) // 409
	case err == nil:
		EncodeJSONResponse(&User{
			ID:   u.ID,
			Name: u.Name,
		}, nil, w)
	default:
		unexpectedError(err, w)
	}
}
