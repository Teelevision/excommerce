/*
 * ExCommerce
 *
 * ExCommerce is an example commerce system.
 *
 * API version: beta
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"regexp"
	"strings"

	"github.com/Teelevision/excommerce/authentication"
	"github.com/Teelevision/excommerce/controller"
	"github.com/Teelevision/excommerce/model"
	"github.com/gorilla/mux"
)

var _ Router = (*CartsAPI)(nil)

// A CartsAPI binds http requests to an api service and writes the service results to the http response
type CartsAPI struct {
	service CartsAPIServicer

	Authenticator       *authentication.Authenticator
	StoreCartController *controller.StoreCartController
}

// Routes returns all of the api route for the CartsApiController
func (c *CartsAPI) Routes() Routes {
	return Routes{
		{
			"DeleteCart",
			strings.ToUpper("Delete"),
			"/beta/carts/{cartId}",
			c.DeleteCart,
		},
		{
			"GetAllCarts",
			strings.ToUpper("Get"),
			"/beta/carts",
			c.GetAllCarts,
		},
		{
			"GetCart",
			strings.ToUpper("Get"),
			"/beta/carts/{cartId}",
			c.GetCart,
		},
		{
			"StoreCart",
			strings.ToUpper("Put"),
			"/beta/carts/{cartId}",
			c.Authenticator.HandlerFunc(c.StoreCart),
		},
	}
}

// DeleteCart - Delete a cart
func (c *CartsAPI) DeleteCart(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	cartID := params["cartId"]
	result, err := c.service.DeleteCart(cartID)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// GetAllCarts - Get all carts
func (c *CartsAPI) GetAllCarts(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	locked := query.Get("locked") == "true"
	result, err := c.service.GetAllCarts(locked)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// GetCart - Get a cart
func (c *CartsAPI) GetCart(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	cartID := params["cartId"]
	result, err := c.service.GetCart(cartID)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// StoreCart - Store a cart
func (c *CartsAPI) StoreCart(w http.ResponseWriter, r *http.Request) {
	// validation
	params := mux.Vars(r)
	cartID := params["cartId"]
	if !uuidPattern.Match([]byte(cartID)) {
		invalidInput("The cartId of the path is not a UUID.", uuidPattern.String(), w)
		return
	}
	input := &Cart{}
	if err := json.NewDecoder(r.Body).Decode(&input); err != nil {
		invalidJSON(err, w)
		return
	}
	for i, position := range input.Positions {
		if !uuidPattern.Match([]byte(position.Product.ID)) {
			failValidation("The product id is not a UUID.", fmt.Sprintf("/positions/%d/product/id", i), w)
		}
		// TODO: validate that the product exists
	}

	// convert to internal model
	cart := model.Cart{
		ID:        cartID,
		Positions: make([]model.Position, len(input.Positions)),
	}
	for i, position := range input.Positions {
		cart.Positions[i].ProductID = position.Product.ID
		cart.Positions[i].Quantity = int(position.Quantity)
	}

	// action
	ctx := r.Context()
	var existed bool
	// create (or update if cart already exists)
	err := c.StoreCartController.Create(ctx, &cart)
	if errors.Is(err, controller.ErrConflict) {
		existed = true
		err = c.StoreCartController.Update(ctx, &cart)
	}
	switch {
	case errors.Is(err, controller.ErrForbidden):
		w.WriteHeader(http.StatusForbidden) // 403
	case err == nil:
		if existed {
			w.WriteHeader(http.StatusOK) // 200
		} else {
			w.WriteHeader(http.StatusCreated) // 201
		}
		// TODO: return cart with computed values
	default:
		panic(err)
	}
}

var uuidPattern = regexp.MustCompile(`^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$`)
