/*
 * ExCommerce
 *
 * ExCommerce is an example commerce system.
 *
 * API version: beta
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A OrdersAPIController binds http requests to an api service and writes the service results to the http response
type OrdersAPIController struct {
	service OrdersAPIServicer
}

// NewOrdersAPIController creates a default api controller
func NewOrdersAPIController(s OrdersAPIServicer) Router {
	return &OrdersAPIController{service: s}
}

// Routes returns all of the api route for the OrdersApiController
func (c *OrdersAPIController) Routes() Routes {
	return Routes{
		{
			"CreateOrderFromCart",
			strings.ToUpper("Post"),
			"/beta/carts/{cartId}/prepareOrder",
			c.CreateOrderFromCart,
		},
		{
			"PlaceOrder",
			strings.ToUpper("Post"),
			"/beta/orders/{orderId}/place",
			c.PlaceOrder,
		},
	}
}

// CreateOrderFromCart - Create order from cart
func (c *OrdersAPIController) CreateOrderFromCart(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	cartID := params["cartId"]
	order := &Order{}
	if err := json.NewDecoder(r.Body).Decode(&order); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.CreateOrderFromCart(cartID, *order)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// PlaceOrder - Place order
func (c *OrdersAPIController) PlaceOrder(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	orderID := params["orderId"]
	result, err := c.service.PlaceOrder(orderID)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}
