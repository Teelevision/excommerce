openapi: 3.0.3
info:
  title: ExCommerce
  description: ExCommerce is an example commerce system.
  version: beta

servers:
- url: http://localhost:8080/beta

paths:

  /users:

    post:
      operationId: register
      tags:
        - Users
      summary: Register a user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        201:
          description: User was created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        409:
          description: Name already taken.
        422:
          description: The input is invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MalformedInputError"
              example:
                message: The password must be at least 8 characters long.
                pointer: /password
        5XX:
          $ref: "#/components/responses/5XX"

  /users/login:

    post:
      operationId: login
      tags:
        - Users
      summary: Login a user
      description: You log in using the user's name and password and you'll get
        the user id as a result. The user id in combination with the password
        can be used in a basic auth header to authenticate during the checkout.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginForm"
      responses:
        200:
          description: User exists.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        404:
          description: User does not exist or password is incorrect.
        5XX:
          $ref: "#/components/responses/5XX"

  /products:

    get:
      operationId: getAllProducts
      tags:
        - Products
      summary: Get all products
      description: Get all products.
      responses:
        200:
          description: A list of producs.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
        5XX:
          $ref: "#/components/responses/5XX"

  /products/{productId}/coupon/{couponCode}:
    parameters:
      - $ref: '#/components/parameters/productId'
      - $ref: '#/components/parameters/couponCode'

    put:
      operationId: storeCouponForProduct
      tags:
        - Products
      summary: Create product coupon
      description: Create a coupon for the product. This api requires admin
        access.
      security:
        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Coupon"
      responses:
        200:
          description: The created/updated coupon.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Coupon"
        401:
          description: You are not authenticated.
        403:
          description: You are forbidden to create a coupon for this product.
        404:
          description: The product was not found.
        422:
          description: The input is invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MalformedInputError"
              example:
                message: The name needs to be between 1-100 characters long.
                pointer: /name
        5XX:
          $ref: "#/components/responses/5XX"

  /carts:

    get:
      operationId: getAllCarts
      tags:
        - Carts
      summary: Get all carts
      description: Get all unlocked carts of the current user.
      security:
        - basicAuth: []
      parameters:
        - in: query
          name: locked
          description: Filter by the carts' locked status.
          schema:
            type: boolean
            enum:
              - false
          required: true
      responses:
        200:
          description: A list of carts.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Cart"
        401:
          description: You are not authenticated.
        5XX:
          $ref: "#/components/responses/5XX"

  /carts/{cartId}:
    parameters:
      - $ref: '#/components/parameters/cartId'

    get:
      operationId: getCart
      tags:
        - Carts
      summary: Get a cart
      description: Get a cart of the current user.
      security:
        - basicAuth: []
      responses:
        200:
          description: The cart.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
        401:
          description: You are not authenticated.
        404:
          description: Cart not found.
        410:
          description: The cart was deleted.
        5XX:
          $ref: "#/components/responses/5XX"

    put:
      operationId: storeCart
      tags:
        - Carts
      summary: Store a cart
      description: Store a cart for the current user. If this cart exists it is
        updated.
      security:
        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Cart"
      responses:
        200:
          description: The cart was updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
        201:
          description: New cart was stored.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
        401:
          description: You are not authenticated.
        403:
          description: You are forbidden to update this cart.
        410:
          description: The cart was deleted.
        422:
          description: The input is invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MalformedInputError"
              example:
                message: Product unknown.
                pointer: /positions/0/product/id
        423:
          description: The cart is locked and cannot be updated. A cart is
            locked if there is a placed order for that cart.
        5XX:
          $ref: "#/components/responses/5XX"

    delete:
      operationId: deleteCart
      tags:
        - Carts
      summary: Delete a cart
      description: Delete a cart of the current user.
      responses:
        204:
          description: The cart was deleted.
        401:
          description: You are not authenticated.
        403:
          description: You are forbidden to delete this cart.
        404:
          description: The cart does not exist.
        423:
          description: The cart is locked and cannot be deleted. A cart is
            locked if there is a placed order for that cart.
        5XX:
          $ref: "#/components/responses/5XX"

  /carts/{cartId}/prepareOrder:
    parameters:
      - $ref: '#/components/parameters/cartId'

    post:
      operationId: createOrderFromCart
      tags:
        - Orders
      summary: Create order from cart
      description: Create an order from this cart of the current user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        200:
          description: The order is valid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        401:
          description: You are not authenticated.
        403:
          description: You are forbidden to order this cart.
        404:
          description: The cart was not found.
        410:
          description: The cart was deleted.
        422:
          description: The input is invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MalformedInputError"
              example:
                message: The street is missing in the recipient's address.
                pointer: /recipient/street
        423:
          description: The cart is locked and cannot be ordered. A cart is
            locked if there already is a placed order for that cart.
        5XX:
          $ref: "#/components/responses/5XX"

  /orders/{orderId}/place:
    parameters:
      - $ref: '#/components/parameters/orderId'

    post:
      operationId: placeOrder
      tags:
        - Orders
      summary: Place order
      description: Place an order of the current user.
      responses:
        200:
          description: The placed order.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
              example:
                id: ba3e44b1-59ea-4325-a8a8-600f3a081e73
                status: placed
                price: 36.10
                buyer:
                  name: Bundeskanzleramt, Bundeskanzlerin Angela Merkel
                  country: DE
                  postalCode: 10557
                  city: Berlin
                  street: Willy-Brandt-Straße 1
                recipient:
                  name: Bundeskanzleramt, Bundeskanzlerin Angela Merkel
                  country: DE
                  postalCode: 10557
                  city: Berlin
                  street: Willy-Brandt-Straße 1
                positions:
                  - quantity: 3
                    product:
                      id: 0061f256-d4b8-4dd3-85e3-aaaa88a050d2
                      name: Orange
                      price: 13.37
                    price: 40.11
                  - quantity: 1
                    product:
                      name: 30% off oranges
                      price: -12.03
                    price: -12.03
        401:
          description: You are not authenticated.
        403:
          description: You are forbidden to access this order.
        404:
          description: The order was not found.
        410:
          description: The order is not valid anymore. This happens if anything
            about the order changes. For example the cart the order relies on
            was updated, or a coupon expired. The server may invalidate orders
            for any reason.
        423:
          description: The order is locked and cannot be placed. An order might
            be locked because it was already placed.
        5XX:
          $ref: "#/components/responses/5XX"

components:
  parameters:

    cartId:
      in: path
      name: cartId
      description: The cart UUID.
      schema:
        type: string
        format: uuid
      required: true
      example: 2c3573ab-1d57-46bf-b979-5eaac02d850b

    orderId:
      in: path
      name: orderId
      description: The order UUID.
      schema:
        type: string
        format: uuid
      required: true
      example: ba3e44b1-59ea-4325-a8a8-600f3a081e73

    productId:
      in: path
      name: productId
      description: The product UUID.
      schema:
        type: string
        format: uuid
      required: true
      example: 0061f256-d4b8-4dd3-85e3-aaaa88a050d2

    couponCode:
      in: path
      name: couponCode
      description: The case-insensitive coupon code.
      schema:
        type: string
        minLength: 6
        maxLength: 40
      required: true
      example: orange30

  responses:

    5XX:
      description: Unexpected error.
      content:
        application/json:
          schema:
            properties:
              message:
                type: string
                description: A human-readable message about what went wrong.
                example: Unexpected error.

  schemas:

    LoginForm:
      description: Login form
      required:
        - name
        - password
      properties:
        name:
          $ref: "#/components/schemas/User/properties/name"
        password:
          $ref: "#/components/schemas/User/properties/password"

    MalformedInputError:
      description: The input is invalid.
      required:
        - message
        - pointer
      properties:
        message:
          type: string
          description: A human-readable message about what went wrong.
        pointer:
          type: string
          format: json pointer
          description: A JSON Pointer to the incorrect input value.

    User:
      description: A user of the shop.
      required:
        - id
        - name
        - password
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: The UUID of the user.
          example: eb29a69f-d2f1-4217-9787-5797a44bd81a
        name:
          type: string
          description: The unique name of the user.
          minLength: 1
          maxLength: 64
          example: strobbery
        password:
          type: string
          format: password
          writeOnly: true
          minLength: 8
          maxLength: 64
          description: The plain text password of the user.
          example: correct horse battery staple

    Product:
      description: A product of the shop.
      required:
        - name
      properties:
        id:
          type: string
          format: uuid
          description: The UUID of the product. If a product has no id it is a
            virtual product, like a discount, and only for displaying purposes.
          example: 0061f256-d4b8-4dd3-85e3-aaaa88a050d2
        name:
          type: string
          readOnly: true
          description: The display name of the product.
          minLength: 1
          example: Orange
        price:
          type: number
          readOnly: true
          format: float
          description: The price of a single item of the product.
          example: 13.37

    Position:
      description: A position in a cart.
      required:
        - quantity
        - product
        - price
      properties:
        quantity:
          type: integer
          minimum: 1
          description: The quantity of the position.
          example: 3
        product:
          $ref: "#/components/schemas/Product"
        price:
          type: number
          format: float
          readOnly: true
          description: The total price of this position.
          example: 40.11

    Cart:
      description: A cart containing products.
      required:
        - id
        - positions
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: The UUID of the cart.
          example: 2c3573ab-1d57-46bf-b979-5eaac02d850b
        positions:
          type: array
          items:
            $ref: "#/components/schemas/Position"
        locked:
          type: boolean
          readOnly: true
          description: Whether the cart is locked.
          default: false

    Order:
      description: An order.
      required:
        - id
        - status
        - price
        - buyer
        - recipient
        - positions
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: The UUID of the order.
          example: ba3e44b1-59ea-4325-a8a8-600f3a081e73
        status:
          type: string
          readOnly: true
          description: The status of the order.
          enum:
            - valid
            - placed
          example: valid
        price:
          type: number
          format: float
          readOnly: true
          description: The total price of this order.
          example: 28.08
        buyer:
          $ref: "#/components/schemas/Address"
        recipient:
          $ref: "#/components/schemas/Address"
        coupons:
          type: array
          items:
            $ref: "#/components/schemas/Coupon/properties/code"
          uniqueItems: true
        positions:
          allOf:
            - type: array
              items:
                $ref: "#/components/schemas/Position"
            - readOnly: true
              example:
                - quantity: 3
                  product:
                    id: 0061f256-d4b8-4dd3-85e3-aaaa88a050d2
                    name: Orange
                    price: 13.37
                  price: 40.11
                - quantity: 1
                  product:
                    name: 30% off oranges
                    price: -12.03
                  price: -12.03
        
    Address:
      description: An address or a person, company or similar.
      required:
        - name
        - country
        - postalCode
        - city
        - street
      properties:
        name:
          type: string
          description: The name of the person, company or similar.
          example: Bundeskanzleramt, Bundeskanzlerin Angela Merkel
        country:
          type: string
          format: ISO 3166-1 alpha-2
          description: The ISO 3166-1 alpha-2 country code.
          example: DE
        postalCode:
          type: string
          description: The postal code code.
          example: 10557
        city:
          type: string
          description: The city.
          example: Berlin
        street:
          type: string
          description: The street name, number and any suffixes.
          example: Willy-Brandt-Straße 1

    Coupon:
      description: A coupon for a product that can be used during checkout.
      required:
        - name
        - code
        - discount
        - product
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: The coupon display text.
          example: 30% off oranges
        code:
          type: string
          readOnly: true
          description: The case-insensitive coupon code.
          example: ORANGE30
        discount:
          type: integer
          minimum: 1
          maximum: 100
          description: The discount in percent on the product price.
          example: 30
        product:
          allOf:
            - $ref: "#/components/schemas/Product"
            - readOnly: true
        expiresAt:
          type: string
          format: date-time
          description: The time when this coupon exires. If omitted the server
            chooses a time in the future.
          example: 2020-05-05T17:32:28+02:00

  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
      description: Use the user's id and password to generate the basic auth
        value. To get the id of a user from the user's name use the
        `/users/login` endpoint.
