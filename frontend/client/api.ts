// tslint:disable
/**
 * ExCommerce
 * ExCommerce is an example commerce system.
 *
 * The version of the OpenAPI document: beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * An address of a person, company or similar.
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * The name of the person, company or similar.
     * @type {string}
     * @memberof Address
     */
    name: string;
    /**
     * The ISO 3166-1 alpha-2 country code.
     * @type {string}
     * @memberof Address
     */
    country: string;
    /**
     * The postal code code.
     * @type {string}
     * @memberof Address
     */
    postalCode: string;
    /**
     * The city.
     * @type {string}
     * @memberof Address
     */
    city: string;
    /**
     * The street name, number and any suffixes.
     * @type {string}
     * @memberof Address
     */
    street: string;
}
/**
 * A cart containing products.
 * @export
 * @interface Cart
 */
export interface Cart {
    /**
     * The UUID of the cart.
     * @type {string}
     * @memberof Cart
     */
    id: string;
    /**
     * 
     * @type {Array<Position>}
     * @memberof Cart
     */
    positions: Array<Position>;
    /**
     * Whether the cart is locked.
     * @type {boolean}
     * @memberof Cart
     */
    locked?: boolean;
}
/**
 * A coupon for a product that can be used during checkout.
 * @export
 * @interface Coupon
 */
export interface Coupon {
    /**
     * The coupon display text.
     * @type {string}
     * @memberof Coupon
     */
    name: string;
    /**
     * The case-insensitive coupon code.
     * @type {string}
     * @memberof Coupon
     */
    code: string;
    /**
     * The discount in percent on the product price.
     * @type {number}
     * @memberof Coupon
     */
    discount: number;
    /**
     * 
     * @type {Product & object}
     * @memberof Coupon
     */
    product: Product & object;
    /**
     * The time when this coupon exires. If omitted the server chooses a time in the future.
     * @type {string}
     * @memberof Coupon
     */
    expiresAt?: string;
}
/**
 * Login form
 * @export
 * @interface LoginForm
 */
export interface LoginForm {
    /**
     * 
     * @type {Name}
     * @memberof LoginForm
     */
    name: Name;
    /**
     * 
     * @type {Password}
     * @memberof LoginForm
     */
    password: Password;
}
/**
 * The input is invalid.
 * @export
 * @interface MalformedInputError
 */
export interface MalformedInputError {
    /**
     * A human-readable message about what went wrong.
     * @type {string}
     * @memberof MalformedInputError
     */
    message: string;
    /**
     * A JSON Pointer to the incorrect input value.
     * @type {string}
     * @memberof MalformedInputError
     */
    pointer: string;
}
/**
 * An order.
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * The UUID of the order.
     * @type {string}
     * @memberof Order
     */
    id: string;
    /**
     * The status of the order.
     * @type {string}
     * @memberof Order
     */
    status: OrderStatusEnum;
    /**
     * The total price of this order.
     * @type {number}
     * @memberof Order
     */
    price: number;
    /**
     * 
     * @type {Address}
     * @memberof Order
     */
    buyer: Address;
    /**
     * 
     * @type {Address}
     * @memberof Order
     */
    recipient: Address;
    /**
     * 
     * @type {Array<Code>}
     * @memberof Order
     */
    coupons?: Array<Code>;
    /**
     * 
     * @type {Array<Position> & object}
     * @memberof Order
     */
    positions: Array<Position> & object;
}

/**
    * @export
    * @enum {string}
    */
export enum OrderStatusEnum {
    Valid = 'valid',
    Placed = 'placed'
}

/**
 * A position in a cart.
 * @export
 * @interface Position
 */
export interface Position {
    /**
     * The quantity of the position.
     * @type {number}
     * @memberof Position
     */
    quantity: number;
    /**
     * 
     * @type {Product}
     * @memberof Position
     */
    product: Product;
    /**
     * The total price of this position.
     * @type {number}
     * @memberof Position
     */
    price: number;
}
/**
 * A product of the shop.
 * @export
 * @interface Product
 */
export interface Product {
    /**
     * The UUID of the product. If a product has no id it is a virtual product, like a discount, and only for displaying purposes.
     * @type {string}
     * @memberof Product
     */
    id?: string;
    /**
     * The display name of the product.
     * @type {string}
     * @memberof Product
     */
    name: string;
    /**
     * The price of a single item of the product.
     * @type {number}
     * @memberof Product
     */
    price?: number;
}
/**
 * A user of the shop.
 * @export
 * @interface User
 */
export interface User {
    /**
     * The UUID of the user.
     * @type {string}
     * @memberof User
     */
    id: string;
    /**
     * The unique name of the user.
     * @type {string}
     * @memberof User
     */
    name: string;
    /**
     * The plain text password of the user.
     * @type {string}
     * @memberof User
     */
    password: string;
}

/**
 * CartsApi - axios parameter creator
 * @export
 */
export const CartsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a cart of the current user.
         * @summary Delete a cart
         * @param {string} cartId The cart UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCart(cartId: string, options: any = {}): RequestArgs {
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new RequiredError('cartId','Required parameter cartId was null or undefined when calling deleteCart.');
            }
            const localVarPath = `/carts/{cartId}`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all unlocked carts of the current user.
         * @summary Get all carts
         * @param {boolean} locked Filter by the carts\&#39; locked status.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCarts(locked: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'locked' is not null or undefined
            if (locked === null || locked === undefined) {
                throw new RequiredError('locked','Required parameter locked was null or undefined when calling getAllCarts.');
            }
            const localVarPath = `/carts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (locked !== undefined) {
                localVarQueryParameter['locked'] = locked;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a cart of the current user.
         * @summary Get a cart
         * @param {string} cartId The cart UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCart(cartId: string, options: any = {}): RequestArgs {
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new RequiredError('cartId','Required parameter cartId was null or undefined when calling getCart.');
            }
            const localVarPath = `/carts/{cartId}`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Store a cart for the current user. If this cart exists it is updated.
         * @summary Store a cart
         * @param {string} cartId The cart UUID.
         * @param {Cart} cart 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeCart(cartId: string, cart: Cart, options: any = {}): RequestArgs {
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new RequiredError('cartId','Required parameter cartId was null or undefined when calling storeCart.');
            }
            // verify required parameter 'cart' is not null or undefined
            if (cart === null || cart === undefined) {
                throw new RequiredError('cart','Required parameter cart was null or undefined when calling storeCart.');
            }
            const localVarPath = `/carts/{cartId}`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof cart !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(cart !== undefined ? cart : {}) : (cart || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsApi - functional programming interface
 * @export
 */
export const CartsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Delete a cart of the current user.
         * @summary Delete a cart
         * @param {string} cartId The cart UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCart(cartId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = CartsApiAxiosParamCreator(configuration).deleteCart(cartId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get all unlocked carts of the current user.
         * @summary Get all carts
         * @param {boolean} locked Filter by the carts\&#39; locked status.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCarts(locked: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Cart>> {
            const localVarAxiosArgs = CartsApiAxiosParamCreator(configuration).getAllCarts(locked, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a cart of the current user.
         * @summary Get a cart
         * @param {string} cartId The cart UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCart(cartId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Cart> {
            const localVarAxiosArgs = CartsApiAxiosParamCreator(configuration).getCart(cartId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Store a cart for the current user. If this cart exists it is updated.
         * @summary Store a cart
         * @param {string} cartId The cart UUID.
         * @param {Cart} cart 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeCart(cartId: string, cart: Cart, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Cart> {
            const localVarAxiosArgs = CartsApiAxiosParamCreator(configuration).storeCart(cartId, cart, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CartsApi - factory interface
 * @export
 */
export const CartsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Delete a cart of the current user.
         * @summary Delete a cart
         * @param {string} cartId The cart UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCart(cartId: string, options?: any): AxiosPromise<void> {
            return CartsApiFp(configuration).deleteCart(cartId, options)(axios, basePath);
        },
        /**
         * Get all unlocked carts of the current user.
         * @summary Get all carts
         * @param {boolean} locked Filter by the carts\&#39; locked status.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCarts(locked: boolean, options?: any): AxiosPromise<Array<Cart>> {
            return CartsApiFp(configuration).getAllCarts(locked, options)(axios, basePath);
        },
        /**
         * Get a cart of the current user.
         * @summary Get a cart
         * @param {string} cartId The cart UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCart(cartId: string, options?: any): AxiosPromise<Cart> {
            return CartsApiFp(configuration).getCart(cartId, options)(axios, basePath);
        },
        /**
         * Store a cart for the current user. If this cart exists it is updated.
         * @summary Store a cart
         * @param {string} cartId The cart UUID.
         * @param {Cart} cart 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeCart(cartId: string, cart: Cart, options?: any): AxiosPromise<Cart> {
            return CartsApiFp(configuration).storeCart(cartId, cart, options)(axios, basePath);
        },
    };
};

/**
 * CartsApi - object-oriented interface
 * @export
 * @class CartsApi
 * @extends {BaseAPI}
 */
export class CartsApi extends BaseAPI {
    /**
     * Delete a cart of the current user.
     * @summary Delete a cart
     * @param {string} cartId The cart UUID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsApi
     */
    public deleteCart(cartId: string, options?: any) {
        return CartsApiFp(this.configuration).deleteCart(cartId, options)(this.axios, this.basePath);
    }

    /**
     * Get all unlocked carts of the current user.
     * @summary Get all carts
     * @param {boolean} locked Filter by the carts\&#39; locked status.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsApi
     */
    public getAllCarts(locked: boolean, options?: any) {
        return CartsApiFp(this.configuration).getAllCarts(locked, options)(this.axios, this.basePath);
    }

    /**
     * Get a cart of the current user.
     * @summary Get a cart
     * @param {string} cartId The cart UUID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsApi
     */
    public getCart(cartId: string, options?: any) {
        return CartsApiFp(this.configuration).getCart(cartId, options)(this.axios, this.basePath);
    }

    /**
     * Store a cart for the current user. If this cart exists it is updated.
     * @summary Store a cart
     * @param {string} cartId The cart UUID.
     * @param {Cart} cart 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsApi
     */
    public storeCart(cartId: string, cart: Cart, options?: any) {
        return CartsApiFp(this.configuration).storeCart(cartId, cart, options)(this.axios, this.basePath);
    }

}


/**
 * OrdersApi - axios parameter creator
 * @export
 */
export const OrdersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create an order from this cart of the current user.
         * @summary Create order from cart
         * @param {string} cartId The cart UUID.
         * @param {Order} [order] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrderFromCart(cartId: string, order?: Order, options: any = {}): RequestArgs {
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new RequiredError('cartId','Required parameter cartId was null or undefined when calling createOrderFromCart.');
            }
            const localVarPath = `/carts/{cartId}/prepareOrder`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof order !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(order !== undefined ? order : {}) : (order || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Place an order of the current user.
         * @summary Place order
         * @param {string} orderId The order UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        placeOrder(orderId: string, options: any = {}): RequestArgs {
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId','Required parameter orderId was null or undefined when calling placeOrder.');
            }
            const localVarPath = `/orders/{orderId}/place`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrdersApi - functional programming interface
 * @export
 */
export const OrdersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create an order from this cart of the current user.
         * @summary Create order from cart
         * @param {string} cartId The cart UUID.
         * @param {Order} [order] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrderFromCart(cartId: string, order?: Order, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order> {
            const localVarAxiosArgs = OrdersApiAxiosParamCreator(configuration).createOrderFromCart(cartId, order, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Place an order of the current user.
         * @summary Place order
         * @param {string} orderId The order UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        placeOrder(orderId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order> {
            const localVarAxiosArgs = OrdersApiAxiosParamCreator(configuration).placeOrder(orderId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * OrdersApi - factory interface
 * @export
 */
export const OrdersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create an order from this cart of the current user.
         * @summary Create order from cart
         * @param {string} cartId The cart UUID.
         * @param {Order} [order] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrderFromCart(cartId: string, order?: Order, options?: any): AxiosPromise<Order> {
            return OrdersApiFp(configuration).createOrderFromCart(cartId, order, options)(axios, basePath);
        },
        /**
         * Place an order of the current user.
         * @summary Place order
         * @param {string} orderId The order UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        placeOrder(orderId: string, options?: any): AxiosPromise<Order> {
            return OrdersApiFp(configuration).placeOrder(orderId, options)(axios, basePath);
        },
    };
};

/**
 * OrdersApi - object-oriented interface
 * @export
 * @class OrdersApi
 * @extends {BaseAPI}
 */
export class OrdersApi extends BaseAPI {
    /**
     * Create an order from this cart of the current user.
     * @summary Create order from cart
     * @param {string} cartId The cart UUID.
     * @param {Order} [order] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public createOrderFromCart(cartId: string, order?: Order, options?: any) {
        return OrdersApiFp(this.configuration).createOrderFromCart(cartId, order, options)(this.axios, this.basePath);
    }

    /**
     * Place an order of the current user.
     * @summary Place order
     * @param {string} orderId The order UUID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public placeOrder(orderId: string, options?: any) {
        return OrdersApiFp(this.configuration).placeOrder(orderId, options)(this.axios, this.basePath);
    }

}


/**
 * ProductsApi - axios parameter creator
 * @export
 */
export const ProductsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all products.
         * @summary Get all products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProducts(options: any = {}): RequestArgs {
            const localVarPath = `/products`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a coupon for the product. This api requires admin access.
         * @summary Create product coupon
         * @param {string} productId The product UUID.
         * @param {string} couponCode The case-insensitive coupon code.
         * @param {Coupon} coupon 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeCouponForProduct(productId: string, couponCode: string, coupon: Coupon, options: any = {}): RequestArgs {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling storeCouponForProduct.');
            }
            // verify required parameter 'couponCode' is not null or undefined
            if (couponCode === null || couponCode === undefined) {
                throw new RequiredError('couponCode','Required parameter couponCode was null or undefined when calling storeCouponForProduct.');
            }
            // verify required parameter 'coupon' is not null or undefined
            if (coupon === null || coupon === undefined) {
                throw new RequiredError('coupon','Required parameter coupon was null or undefined when calling storeCouponForProduct.');
            }
            const localVarPath = `/products/{productId}/coupon/{couponCode}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)))
                .replace(`{${"couponCode"}}`, encodeURIComponent(String(couponCode)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof coupon !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(coupon !== undefined ? coupon : {}) : (coupon || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsApi - functional programming interface
 * @export
 */
export const ProductsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get all products.
         * @summary Get all products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProducts(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Product>> {
            const localVarAxiosArgs = ProductsApiAxiosParamCreator(configuration).getAllProducts(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a coupon for the product. This api requires admin access.
         * @summary Create product coupon
         * @param {string} productId The product UUID.
         * @param {string} couponCode The case-insensitive coupon code.
         * @param {Coupon} coupon 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeCouponForProduct(productId: string, couponCode: string, coupon: Coupon, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Coupon> {
            const localVarAxiosArgs = ProductsApiAxiosParamCreator(configuration).storeCouponForProduct(productId, couponCode, coupon, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ProductsApi - factory interface
 * @export
 */
export const ProductsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get all products.
         * @summary Get all products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProducts(options?: any): AxiosPromise<Array<Product>> {
            return ProductsApiFp(configuration).getAllProducts(options)(axios, basePath);
        },
        /**
         * Create a coupon for the product. This api requires admin access.
         * @summary Create product coupon
         * @param {string} productId The product UUID.
         * @param {string} couponCode The case-insensitive coupon code.
         * @param {Coupon} coupon 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeCouponForProduct(productId: string, couponCode: string, coupon: Coupon, options?: any): AxiosPromise<Coupon> {
            return ProductsApiFp(configuration).storeCouponForProduct(productId, couponCode, coupon, options)(axios, basePath);
        },
    };
};

/**
 * ProductsApi - object-oriented interface
 * @export
 * @class ProductsApi
 * @extends {BaseAPI}
 */
export class ProductsApi extends BaseAPI {
    /**
     * Get all products.
     * @summary Get all products
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public getAllProducts(options?: any) {
        return ProductsApiFp(this.configuration).getAllProducts(options)(this.axios, this.basePath);
    }

    /**
     * Create a coupon for the product. This api requires admin access.
     * @summary Create product coupon
     * @param {string} productId The product UUID.
     * @param {string} couponCode The case-insensitive coupon code.
     * @param {Coupon} coupon 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public storeCouponForProduct(productId: string, couponCode: string, coupon: Coupon, options?: any) {
        return ProductsApiFp(this.configuration).storeCouponForProduct(productId, couponCode, coupon, options)(this.axios, this.basePath);
    }

}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * You log in using the user\'s name and password and you\'ll get the user id as a result. The user id in combination with the password can be used in a basic auth header to authenticate during the checkout.
         * @summary Login a user
         * @param {LoginForm} [loginForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginForm?: LoginForm, options: any = {}): RequestArgs {
            const localVarPath = `/users/login`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof loginForm !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(loginForm !== undefined ? loginForm : {}) : (loginForm || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register a user
         * @param {User} [user] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(user?: User, options: any = {}): RequestArgs {
            const localVarPath = `/users`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof user !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(user !== undefined ? user : {}) : (user || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * You log in using the user\'s name and password and you\'ll get the user id as a result. The user id in combination with the password can be used in a basic auth header to authenticate during the checkout.
         * @summary Login a user
         * @param {LoginForm} [loginForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginForm?: LoginForm, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User> {
            const localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).login(loginForm, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Register a user
         * @param {User} [user] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(user?: User, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User> {
            const localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).register(user, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * You log in using the user\'s name and password and you\'ll get the user id as a result. The user id in combination with the password can be used in a basic auth header to authenticate during the checkout.
         * @summary Login a user
         * @param {LoginForm} [loginForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginForm?: LoginForm, options?: any): AxiosPromise<User> {
            return UsersApiFp(configuration).login(loginForm, options)(axios, basePath);
        },
        /**
         * 
         * @summary Register a user
         * @param {User} [user] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(user?: User, options?: any): AxiosPromise<User> {
            return UsersApiFp(configuration).register(user, options)(axios, basePath);
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * You log in using the user\'s name and password and you\'ll get the user id as a result. The user id in combination with the password can be used in a basic auth header to authenticate during the checkout.
     * @summary Login a user
     * @param {LoginForm} [loginForm] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public login(loginForm?: LoginForm, options?: any) {
        return UsersApiFp(this.configuration).login(loginForm, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Register a user
     * @param {User} [user] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public register(user?: User, options?: any) {
        return UsersApiFp(this.configuration).register(user, options)(this.axios, this.basePath);
    }

}


